var path = require("path");
var fs = require("fs");
var g = require("node-github");
var prompt = require('prompt');

function setupGithubHooks(config, callback) {

    var properties = [ {
        name: 'username', 
        validator: /^[a-zA-Z\.\-]+$/,
        warning: 'Username must be only letters, dots, or dashes'
    }, {
        name: 'password',
        hidden: true
    } ];

    prompt.start();

    prompt.get(properties, function (err, result) {
        if (err) { 
            callback(err);
        }
        else {

            var github = new g({ version: "3.0.0", timeout: 5000 });

            var counter = config.deploys.length;
            var errors = [];

            function done(err) {
                if (err) {
                    errors.push(err);
                }
                if (--counter == 0) {
                    if (errors.length > 0) {
                        callback({error: true, list: errors});
                    }
                    else {
                        callback();
                    }
                }
            }

            github.authenticate({
                type : "basic",
                username : result.username,
                password : result.password
            });

            config.deploys.forEach(function(deploy) {

                var repoUrlDetails = deploy.repo.split("/");
                var repoName = repoUrlDetails.pop();
                var userName = repoUrlDetails.pop();
                var hookName = "web";

                github.repos.getHooks({ user: userName, repo: repoName }, function(err, result){
                    if (err) {
                        done(err);
                    }
                    else {
                        var exists = false;
                        var hookUrl = config.publicurl + "/incoming/" + repoName;
                        for(var i = 0, ii = result.length; i < ii; i++){
                            var hook = result[i];
                            if (hook.name == hookName && hook.config.url == hookUrl) {
                                exists = true;
                                break;
                            }
                        }
                        if (exists) {
                            console.log("Hook for %s already exists and points to %s.", userName + "/" + repoName, hookUrl);
                            done();
                        }
                        else {
                            var defaultEvents = ["pull_request"];
                            github.repos.createHook({
                                user: userName,
                                repo: repoName,
                                name: hookName,
                                config: {
                                    "url": hookUrl,
                                    "content_type": "json",
                                    "type": "webhook-deployer-autogenerated"
                                },
                                "events": deploy.events || defaultEvents,
                                "active": true
                            }, function(err){
                                if (!err) {
                                    console.log("Hook for %s created and points to points %s.", userName + "/" + repoName, hookUrl);
                                }
                                done(err);
                            });
                        }
                    }
                    //console.log(list);
                });

            });

        }
    });

}

module.exports = function(type, deploysConfigFile, callback) {

    var configFile = path.resolve(process.cwd(), deploysConfigFile);
    var deployConfig = JSON.parse(fs.readFileSync(configFile, 'utf8'));

    if (type == "github") {
        setupGithubHooks(deployConfig, callback);
    }

};



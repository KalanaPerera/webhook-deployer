#!/usr/bin/env node

'use strict';

var webdep = require("../lib/webdep.js");
var fs = require("fs");
var path = require("path");
var daemon = require("daemon");
var program = require('commander');
var child_process = require('child_process');

program
    .version(webdep.packageInformation.version)
    .option('-p, --port [port]', 'Set the port number to use. Defaults to 8080')
    .option('-c, --configfile [configfile]', 'Set the path to the config file to be used. Default to ./deploys.json')
    .option('-d, --daemon', 'Run the webhook-deployer as a deamon')
    .option('-r, --repo <repo>', 'The repo to look out for. This option must be used together with the --branch and --command options.')
    .option('-b, --branch <branch>', 'The branch to react to. This option must be used with the --repo and --command options.')
    .option('-co, --command <command>', 'The command to use to deploy. This option must be used with the --repo and --branch options.')
    .option('-s, --stop', 'Stop webhook-deployer that was run as a deamon')
    .option('-l, --log <log>', 'Where to log')
    .parse(process.argv);

var options = {};
options.port = program.port || webdep.defaultOptions.port;
options.config = program.configfile || webdep.defaultOptions.config;
options.repo = program.repo || null;
options.command = program.command || null;
options.branch = program.branch || null;

var appCommand = path.resolve(__dirname, 'webhook-deployer');

var deploysConfigFile = path.resolve(process.cwd(), options.config);

if (!fs.existsSync(deploysConfigFile) || (!options.repo && !options.branch && !options.command)) {
    console.error("No config file found at %s or no repo configured at the command line", deploysConfigFile)
    console.error("You can either set the configuration in a config file and point to it with the --config option, or set the --repo, --branch and --command options.");
    process.exit("No config file found");
}

if (program.daemon) {

    var spawnOptions = { 
        detached: true, 
        stdio: [ 'ignore', 'pipe', 'pipe'],
        cwd: path.resolve(__dirname, "../")
    };

    var out;
    var err;

    if (program.log) {
        var logFile = path.resolve(process.cwd(), program.log);
        out = fs.openSync(logFile, 'a');
        err = fs.openSync(logFile, 'a');
        spawnOptions.stdio = [ 'ignore', out, err];
    }

    var webdepArgs = [];
    webdepArgs.push("--port");
    webdepArgs.push(options.port);

    if (options.config) {
        webdepArgs.push("--configfile");
        webdepArgs.push(deploysConfigFile);
    }

    var child = child_process.spawn(appCommand, webdepArgs, spawnOptions);

    // set up objects dor stdout and stderr depending on where to put it
    var so = null;
    var se = null;

    if (program.log) {
        se = so = fs.createReadStream(logFile);
    }
    else {
        so = child.stdout;
        se = child.stderr;
    }


    so.on('data', function(data) {

        if (data.toString().indexOf("Started") > -1){
            console.log("Staring webhook-deployer %s as a daemon with port", webdep.packageInformation.version, options.port);
            fs.writeFileSync(path.resolve(__dirname, 'webdep.pid'), child.pid, "utf-8");
            process.exit();
        }
        else if (data.toString() != "\n") {
            console.log(data.toString());
        }

    });

    se.on('data', function(data) {
        if (data.toString().indexOf("EADDRINUSE") > -1) {
            console.log("Webhook-deployer coudnt start because the port is already being used.");
        }
        else {
            //console.log(data.toString());
        }
    });

    child.unref();


    //o.on('error', function(err) {
    //console.log("ERROR", err);
    //});
    //child.on('message', function(data) {
    //console.log("message", data.toString());
    //});
    //child.on('error', function(data) {
        //console.log("Data", data);
    //});


    //console.log(child.pid);


    return;



    //});
}
else if (program.stop) {
    var pid = fs.readFileSync(path.resolve(__dirname, 'webdep.pid'), "utf-8");
    child_process.exec("kill " + pid, function(err, data) {
        if (err) {
            console.log(err, data);
        }
        else {
            console.log("Stopped webhook-deployer daemon with PID %s", pid);
        }
    });
}
else {
    webdep.init(options);
}

